package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"sync"
	"syscall"
	"time"

	"github.com/marekm1844/trader_v2-simulator/internal/simulator"
	"github.com/marekm1844/trader_v2-simulator/internal/simulator/dataprovider"
)

// ConsoleEmitter emits candles to the console at the specified interval
type ConsoleEmitter struct {
	timeframe    simulator.TimeFrame
	symbol       string
	interval     time.Duration
	dataProvider simulator.DataProvider
	endTime      time.Time      // End time to stop at
	startTime    time.Time      // Start time for candles
	isRunning    bool           // Flag to track if emitter is currently running
	mu           sync.Mutex     // Mutex for thread-safe operations
	stopCh       chan struct{}  // Channel to signal stop
	ctx          context.Context
	cancel       context.CancelFunc
}

// NewConsoleEmitter creates a new console candle emitter
func NewConsoleEmitter(
	symbol string, 
	timeframe simulator.TimeFrame, 
	interval time.Duration, 
	dataProvider simulator.DataProvider,
	startTime time.Time,
	endTime time.Time,
) *ConsoleEmitter {
	ctx, cancel := context.WithCancel(context.Background())
	return &ConsoleEmitter{
		timeframe:    timeframe,
		symbol:       symbol,
		interval:     interval,
		dataProvider: dataProvider,
		startTime:    startTime,
		endTime:      endTime,
		isRunning:    false,
		stopCh:       make(chan struct{}),
		ctx:          ctx,
		cancel:       cancel,
	}
}

// GetStatus returns the current status of the emitter
func (c *ConsoleEmitter) GetStatus() map[string]interface{} {
	c.mu.Lock()
	defer c.mu.Unlock()
	
	return map[string]interface{}{
		"symbol":       c.symbol,
		"timeframe":    c.timeframe,
		"interval":     c.interval.String(),
		"start_time":   c.startTime.Format(time.RFC3339),
		"end_time":     c.endTime.Format(time.RFC3339),
		"is_running":   c.isRunning,
	}
}

// UpdateParameters updates the emitter parameters without restarting
func (c *ConsoleEmitter) UpdateParameters(
	timeframe simulator.TimeFrame,
	interval time.Duration,
	startTime time.Time,
	endTime time.Time,
) {
	c.mu.Lock()
	defer c.mu.Unlock()
	
	c.timeframe = timeframe
	c.interval = interval
	c.startTime = startTime
	c.endTime = endTime
}

// StartEmitter begins emitting candles at the specified interval
func (c *ConsoleEmitter) StartEmitter() error {
	c.mu.Lock()
	defer c.mu.Unlock()
	
	if c.isRunning {
		return fmt.Errorf("emitter is already running")
	}
	
	// Reset context and stop channel
	if c.ctx.Err() != nil {
		c.ctx, c.cancel = context.WithCancel(context.Background())
		c.stopCh = make(chan struct{})
	}
	
	c.isRunning = true
	
	// Start in a separate goroutine
	go c.run()
	
	return nil
}

// run is the internal method that handles the actual emission
func (c *ConsoleEmitter) run() {
	// Using local copies of parameters to avoid locking inside the loop
	c.mu.Lock()
	symbol := c.symbol
	timeframe := c.timeframe
	interval := c.interval
	initialTime := c.startTime
	endTime := c.endTime
	ctx := c.ctx
	c.mu.Unlock()
	
	log.Printf("Starting candle emitter for %s [%s] at %v intervals", 
		symbol, timeframe, interval)
	
	// Get the data range
	dataStart, dataEnd, err := c.dataProvider.GetDataRange(ctx, symbol, timeframe)
	if err != nil {
		log.Printf("Error getting data range: %v", err)
		c.setRunningState(false)
		return
	}
	
	log.Printf("Data available from %s to %s", 
		dataStart.Format("2006-01-02"), dataEnd.Format("2006-01-02"))
	
	// Use the later of dataStart and initialTime
	currentTime := initialTime
	if dataStart.After(initialTime) {
		currentTime = dataStart
		log.Printf("Using start time %s (earliest available data)", currentTime.Format("2006-01-02"))
	}
	
	// Start ticker to emit candles
	ticker := time.NewTicker(interval)
	defer ticker.Stop()
	
	for {
		select {
		case <-ticker.C:
			// Get fresh values in case they were updated
			c.mu.Lock()
			timeframe = c.timeframe
			endTime = c.endTime
			interval = c.interval
			c.mu.Unlock()
			
			// Update ticker if interval changed
			if ticker.Reset(interval) {
				log.Printf("Updated ticker interval to %v", interval)
			}
			
			// Check if we've reached the user-specified end time
			if currentTime.After(endTime) {
				log.Printf("Reached specified end time: %s, stopping emitter", 
					endTime.Format("2006-01-02 15:04:05"))
				c.setRunningState(false)
				return
			}
			
			// Get the next candle (check if we've reached the end of available data)
			if currentTime.After(dataEnd) {
				log.Println("Reached end of data, restarting from beginning")
				currentTime = dataStart
			}
			
			// Set window size based on timeframe
			var windowSize time.Duration
			var timeAdvance time.Duration
			
			if timeframe == simulator.TimeFrameHourly {
				windowSize = 2 * time.Hour   // 2-hour window for hourly candles
				timeAdvance = 1 * time.Hour  // Advance by 1 hour for hourly candles
			} else {
				windowSize = 48 * time.Hour  // 48-hour window for daily candles
				timeAdvance = 24 * time.Hour // Advance by 24 hours for daily candles
			}
			
			endWindow := currentTime.Add(windowSize)
			candles, err := c.dataProvider.GetCandles(ctx, symbol, timeframe, 
				currentTime, endWindow)
			if err != nil {
				log.Printf("Error getting candles: %v", err)
				continue
			}
			
			if len(candles) == 0 {
				log.Printf("No candles available at %s", 
					currentTime.Format("2006-01-02 15:04:05"))
				currentTime = currentTime.Add(timeAdvance)
				continue
			}
			
			// Emit the first candle
			candle := candles[0]
			log.Printf("CANDLE [%s] %s: O: %.2f, H: %.2f, L: %.2f, C: %.2f, V: %.2f",
				timeframe, candle.Timestamp.Format(time.RFC3339),
				candle.Open, candle.High, candle.Low, candle.Close, candle.Volume)
			
			// Move to the next time period
			currentTime = currentTime.Add(timeAdvance)
			
		case <-c.stopCh:
			log.Println("Stopping candle emitter")
			c.setRunningState(false)
			return
		case <-ctx.Done():
			log.Println("Context canceled, stopping candle emitter")
			c.setRunningState(false)
			return
		}
	}
}

// setRunningState updates the running state thread-safely
func (c *ConsoleEmitter) setRunningState(running bool) {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.isRunning = running
}

// Stop halts candle emission
func (c *ConsoleEmitter) Stop() error {
	c.mu.Lock()
	defer c.mu.Unlock()
	
	if !c.isRunning {
		return fmt.Errorf("emitter is not running")
	}
	
	// Cancel context and close stop channel
	c.cancel()
	close(c.stopCh)
	
	return nil
}

// setupAPIEndpoints configures the HTTP API endpoints
func setupAPIEndpoints(mux *http.ServeMux, emitter *ConsoleEmitter, dataProvider simulator.DataProvider, defaultSymbol string) {
	// Status endpoint
	mux.HandleFunc("/api/status", func(w http.ResponseWriter, r *http.Request) {
		status := emitter.GetStatus()
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(status)
	})
	
	// Start streaming endpoint
	mux.HandleFunc("/api/stream/start", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method not allowed, use POST", http.StatusMethodNotAllowed)
			return
		}
		
		// Parse request parameters
		var req struct {
			Timeframe  string `json:"timeframe,omitempty"`
			Interval   string `json:"interval,omitempty"`
			StartDate  string `json:"start_date,omitempty"`
			EndDate    string `json:"end_date,omitempty"`
		}
		
		// Default response
		response := map[string]interface{}{
			"success": false,
			"message": "",
		}
		
		// Set content type for response
		w.Header().Set("Content-Type", "application/json")
		
		// Try to decode the request body
		if r.Body != nil {
			err := json.NewDecoder(r.Body).Decode(&req)
			if err != nil && err != io.EOF {
				response["message"] = "Invalid request format: " + err.Error()
				json.NewEncoder(w).Encode(response)
				return
			}
		}
		
		// Get data range to determine available dates
		dataStart, dataEnd, err := dataProvider.GetDataRange(r.Context(), defaultSymbol, simulator.TimeFrameDaily)
		if err != nil {
			response["message"] = "Failed to get data range: " + err.Error()
			json.NewEncoder(w).Encode(response)
			return
		}
		
		// Get current parameters
		currentStatus := emitter.GetStatus()
		
		// Parse timeframe
		var timeframe simulator.TimeFrame
		if req.Timeframe != "" {
			switch req.Timeframe {
			case "daily":
				timeframe = simulator.TimeFrameDaily
			case "hourly":
				timeframe = simulator.TimeFrameHourly
			default:
				response["message"] = "Invalid timeframe, must be 'daily' or 'hourly'"
				json.NewEncoder(w).Encode(response)
				return
			}
		} else {
			// Use current timeframe
			timeframe = simulator.TimeFrame(currentStatus["timeframe"].(string))
		}
		
		// Parse interval
		var interval time.Duration
		if req.Interval != "" {
			parsedInterval, err := time.ParseDuration(req.Interval)
			if err != nil {
				response["message"] = "Invalid interval format (use 500ms, 1s, etc.): " + err.Error()
				json.NewEncoder(w).Encode(response)
				return
			}
			interval = parsedInterval
		} else {
			// Use current interval
			intervalStr := currentStatus["interval"].(string)
			interval, _ = time.ParseDuration(intervalStr)
		}
		
		// Parse start date
		var startTime time.Time
		if req.StartDate != "" {
			parsedStartDate, err := time.Parse("2006-01-02", req.StartDate)
			if err != nil {
				response["message"] = "Invalid start_date format. Use YYYY-MM-DD: " + err.Error()
				json.NewEncoder(w).Encode(response)
				return
			}
			startTime = parsedStartDate
			
			// Ensure start date is within available data range
			if startTime.Before(dataStart) {
				log.Printf("Warning: Specified start_date %s is before earliest available data (%s). Using earliest available date.",
					startTime.Format("2006-01-02"), dataStart.Format("2006-01-02"))
				startTime = dataStart
			}
			if startTime.After(dataEnd) {
				response["message"] = fmt.Sprintf("Error: Specified start_date %s is after latest available data (%s)",
					startTime.Format("2006-01-02"), dataEnd.Format("2006-01-02"))
				json.NewEncoder(w).Encode(response)
				return
			}
		} else {
			// Use current start time
			startTimeStr := currentStatus["start_time"].(string)
			startTime, _ = time.Parse(time.RFC3339, startTimeStr)
		}
		
		// Parse end date
		var endTime time.Time
		if req.EndDate != "" {
			parsedEndDate, err := time.Parse("2006-01-02", req.EndDate)
			if err != nil {
				response["message"] = "Invalid end_date format. Use YYYY-MM-DD: " + err.Error()
				json.NewEncoder(w).Encode(response)
				return
			}
			endTime = parsedEndDate
			
			// Ensure end date is within available data range
			if endTime.After(dataEnd) {
				log.Printf("Warning: Specified end_date %s is after latest available data (%s). Using latest available date.",
					endTime.Format("2006-01-02"), dataEnd.Format("2006-01-02"))
				endTime = dataEnd
			}
			if endTime.Before(dataStart) {
				response["message"] = fmt.Sprintf("Error: Specified end_date %s is before earliest available data (%s)",
					endTime.Format("2006-01-02"), dataStart.Format("2006-01-02"))
				json.NewEncoder(w).Encode(response)
				return
			}
			if endTime.Before(startTime) {
				response["message"] = fmt.Sprintf("Error: end_date (%s) must be after start_date (%s)",
					endTime.Format("2006-01-02"), startTime.Format("2006-01-02"))
				json.NewEncoder(w).Encode(response)
				return
			}
		} else {
			// Use current end time
			endTimeStr := currentStatus["end_time"].(string)
			endTime, _ = time.Parse(time.RFC3339, endTimeStr)
		}
		
		// Update emitter parameters
		emitter.UpdateParameters(timeframe, interval, startTime, endTime)
		
		// If emitter is running, stop it first
		if currentStatus["is_running"].(bool) {
			if err := emitter.Stop(); err != nil {
				response["message"] = "Failed to stop current streaming: " + err.Error()
				json.NewEncoder(w).Encode(response)
				return
			}
		}
		
		// Start the emitter
		if err := emitter.StartEmitter(); err != nil {
			response["message"] = "Failed to start streaming: " + err.Error()
			json.NewEncoder(w).Encode(response)
			return
		}
		
		// Success response
		response["success"] = true
		response["message"] = fmt.Sprintf("Started streaming %s candles from %s to %s at %v intervals",
			timeframe, startTime.Format("2006-01-02"), endTime.Format("2006-01-02"), interval)
		json.NewEncoder(w).Encode(response)
	})
	
	// Stop streaming endpoint
	mux.HandleFunc("/api/stream/stop", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method not allowed, use POST", http.StatusMethodNotAllowed)
			return
		}
		
		// Default response
		response := map[string]interface{}{
			"success": false,
			"message": "",
		}
		
		// Set content type for response
		w.Header().Set("Content-Type", "application/json")
		
		// Stop the emitter
		if err := emitter.Stop(); err != nil {
			response["message"] = "Failed to stop streaming: " + err.Error()
			json.NewEncoder(w).Encode(response)
			return
		}
		
		// Success response
		response["success"] = true
		response["message"] = "Streaming stopped successfully"
		json.NewEncoder(w).Encode(response)
	})
}

func main() {
	// Parse command line flags
	timeframeFlag := flag.String("timeframe", "daily", "Timeframe to use (daily or hourly)")
	tickInterval := flag.Duration("interval", 1*time.Second, "Interval between candles (default 1s)")
	dataDir := flag.String("datadir", "data", "Directory containing price data files")
	port := flag.Int("port", 8080, "HTTP server port")
	startDateStr := flag.String("start-date", "", "Start date for candles (format: 2025-01-02, defaults to earliest available)")
	endDateStr := flag.String("end-date", "", "End date for candles (format: 2025-01-02, defaults to latest available)")
	flag.Parse()

	// Validate and parse timeframe
	var timeframe simulator.TimeFrame
	switch *timeframeFlag {
	case "daily":
		timeframe = simulator.TimeFrameDaily
	case "hourly":
		timeframe = simulator.TimeFrameHourly
	default:
		log.Fatalf("Invalid timeframe: %s. Must be 'daily' or 'hourly'", *timeframeFlag)
	}

	log.Printf("Starting simulator with %s candles every %v", timeframe, *tickInterval)

	// Get absolute path for data directory
	absDataDir, err := filepath.Abs(*dataDir)
	if err != nil {
		log.Fatalf("Failed to get absolute path for data directory: %v", err)
	}
	
	// Create file data provider
	dataProvider, err := dataprovider.NewFileDataProvider(absDataDir)
	if err != nil {
		log.Fatalf("Failed to create file data provider: %v", err)
	}
	
	// Get available symbols
	symbols, err := dataProvider.GetAvailableSymbols(context.Background())
	if err != nil {
		log.Fatalf("Failed to get available symbols: %v", err)
	}
	
	if len(symbols) == 0 {
		log.Fatalf("No trading symbols available in data directory")
	}
	
	symbol := symbols[0]
	log.Printf("Using symbol: %s", symbol)
	
	// Get data range to determine available dates
	dataStart, dataEnd, err := dataProvider.GetDataRange(context.Background(), symbol, timeframe)
	if err != nil {
		log.Fatalf("Failed to get data range: %v", err)
	}
	
	// Parse user-specified start date if provided
	var initialTime time.Time
	if *startDateStr != "" {
		parsedStartDate, err := time.Parse("2006-01-02", *startDateStr)
		if err != nil {
			log.Fatalf("Invalid start-date format. Use YYYY-MM-DD format: %v", err)
		}
		initialTime = parsedStartDate
		
		// Ensure start date is within available data range
		if initialTime.Before(dataStart) {
			log.Printf("Warning: Specified start-date %s is before earliest available data (%s). Using earliest available date.",
				initialTime.Format("2006-01-02"), dataStart.Format("2006-01-02"))
			initialTime = dataStart
		}
		if initialTime.After(dataEnd) {
			log.Fatalf("Error: Specified start-date %s is after latest available data (%s)",
				initialTime.Format("2006-01-02"), dataEnd.Format("2006-01-02"))
		}
	} else {
		// Use the data start time as initial time if not specified
		initialTime = dataStart
	}
	
	// Parse user-specified end date if provided
	var endTime time.Time
	if *endDateStr != "" {
		parsedEndDate, err := time.Parse("2006-01-02", *endDateStr)
		if err != nil {
			log.Fatalf("Invalid end-date format. Use YYYY-MM-DD format: %v", err)
		}
		endTime = parsedEndDate
		
		// Ensure end date is within available data range
		if endTime.After(dataEnd) {
			log.Printf("Warning: Specified end-date %s is after latest available data (%s). Using latest available date.",
				endTime.Format("2006-01-02"), dataEnd.Format("2006-01-02"))
			endTime = dataEnd
		}
		if endTime.Before(dataStart) {
			log.Fatalf("Error: Specified end-date %s is before earliest available data (%s)",
				endTime.Format("2006-01-02"), dataStart.Format("2006-01-02"))
		}
		if endTime.Before(initialTime) {
			log.Fatalf("Error: end-date (%s) must be after start-date (%s)",
				endTime.Format("2006-01-02"), initialTime.Format("2006-01-02"))
		}
	} else {
		// Use the data end time as end time if not specified
		endTime = dataEnd
	}
	
	log.Printf("Using date range: %s to %s", initialTime.Format("2006-01-02"), endTime.Format("2006-01-02"))
	
	// Create context that can be canceled
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	
	// Create a console emitter for the selected timeframe
	emitter := NewConsoleEmitter(
		symbol,
		timeframe, 
		*tickInterval,
		dataProvider,
		initialTime,
		endTime,
	)
	
	// Start the emitter
	if err := emitter.StartEmitter(); err != nil {
		log.Printf("Failed to start emitter: %v", err)
	}
	
	log.Println("Simulator started. Press Ctrl+C to stop.")
	
	// Create API endpoints for controlling the simulator
	setupAPIEndpoints(http.DefaultServeMux, emitter, dataProvider, symbol)
	// Status endpoint
	mux.HandleFunc("/api/status", func(w http.ResponseWriter, r *http.Request) {
		status := emitter.GetStatus()
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(status)
	})
	
	// Start streaming endpoint
	mux.HandleFunc("/api/stream/start", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method not allowed, use POST", http.StatusMethodNotAllowed)
			return
		}
		
		// Parse request parameters
		var req struct {
			Timeframe  string `json:"timeframe,omitempty"`
			Interval   string `json:"interval,omitempty"`
			StartDate  string `json:"start_date,omitempty"`
			EndDate    string `json:"end_date,omitempty"`
		}
		
		// Default response
		response := map[string]interface{}{
			"success": false,
			"message": "",
		}
		
		// Set content type for response
		w.Header().Set("Content-Type", "application/json")
		
		// Try to decode the request body
		if r.Body != nil {
			err := json.NewDecoder(r.Body).Decode(&req)
			if err != nil && err != io.EOF {
				response["message"] = "Invalid request format: " + err.Error()
				json.NewEncoder(w).Encode(response)
				return
			}
		}
		
		// Get data range to determine available dates
		dataStart, dataEnd, err := dataProvider.GetDataRange(r.Context(), defaultSymbol, simulator.TimeFrameDaily)
		if err != nil {
			response["message"] = "Failed to get data range: " + err.Error()
			json.NewEncoder(w).Encode(response)
			return
		}
		
		// Get current parameters
		currentStatus := emitter.GetStatus()
		
		// Parse timeframe
		var timeframe simulator.TimeFrame
		if req.Timeframe != "" {
			switch req.Timeframe {
			case "daily":
				timeframe = simulator.TimeFrameDaily
			case "hourly":
				timeframe = simulator.TimeFrameHourly
			default:
				response["message"] = "Invalid timeframe, must be 'daily' or 'hourly'"
				json.NewEncoder(w).Encode(response)
				return
			}
		} else {
			// Use current timeframe
			timeframe = simulator.TimeFrame(currentStatus["timeframe"].(string))
		}
		
		// Parse interval
		var interval time.Duration
		if req.Interval != "" {
			parsedInterval, err := time.ParseDuration(req.Interval)
			if err != nil {
				response["message"] = "Invalid interval format (use 500ms, 1s, etc.): " + err.Error()
				json.NewEncoder(w).Encode(response)
				return
			}
			interval = parsedInterval
		} else {
			// Use current interval
			intervalStr := currentStatus["interval"].(string)
			interval, _ = time.ParseDuration(intervalStr)
		}
		
		// Parse start date
		var startTime time.Time
		if req.StartDate != "" {
			parsedStartDate, err := time.Parse("2006-01-02", req.StartDate)
			if err != nil {
				response["message"] = "Invalid start_date format. Use YYYY-MM-DD: " + err.Error()
				json.NewEncoder(w).Encode(response)
				return
			}
			startTime = parsedStartDate
			
			// Ensure start date is within available data range
			if startTime.Before(dataStart) {
				log.Printf("Warning: Specified start_date %s is before earliest available data (%s). Using earliest available date.",
					startTime.Format("2006-01-02"), dataStart.Format("2006-01-02"))
				startTime = dataStart
			}
			if startTime.After(dataEnd) {
				response["message"] = fmt.Sprintf("Error: Specified start_date %s is after latest available data (%s)",
					startTime.Format("2006-01-02"), dataEnd.Format("2006-01-02"))
				json.NewEncoder(w).Encode(response)
				return
			}
		} else {
			// Use current start time
			startTimeStr := currentStatus["start_time"].(string)
			startTime, _ = time.Parse(time.RFC3339, startTimeStr)
		}
		
		// Parse end date
		var endTime time.Time
		if req.EndDate != "" {
			parsedEndDate, err := time.Parse("2006-01-02", req.EndDate)
			if err != nil {
				response["message"] = "Invalid end_date format. Use YYYY-MM-DD: " + err.Error()
				json.NewEncoder(w).Encode(response)
				return
			}
			endTime = parsedEndDate
			
			// Ensure end date is within available data range
			if endTime.After(dataEnd) {
				log.Printf("Warning: Specified end_date %s is after latest available data (%s). Using latest available date.",
					endTime.Format("2006-01-02"), dataEnd.Format("2006-01-02"))
				endTime = dataEnd
			}
			if endTime.Before(dataStart) {
				response["message"] = fmt.Sprintf("Error: Specified end_date %s is before earliest available data (%s)",
					endTime.Format("2006-01-02"), dataStart.Format("2006-01-02"))
				json.NewEncoder(w).Encode(response)
				return
			}
			if endTime.Before(startTime) {
				response["message"] = fmt.Sprintf("Error: end_date (%s) must be after start_date (%s)",
					endTime.Format("2006-01-02"), startTime.Format("2006-01-02"))
				json.NewEncoder(w).Encode(response)
				return
			}
		} else {
			// Use current end time
			endTimeStr := currentStatus["end_time"].(string)
			endTime, _ = time.Parse(time.RFC3339, endTimeStr)
		}
		
		// Update emitter parameters
		emitter.UpdateParameters(timeframe, interval, startTime, endTime)
		
		// If emitter is running, stop it first
		if currentStatus["is_running"].(bool) {
			if err := emitter.Stop(); err != nil {
				response["message"] = "Failed to stop current streaming: " + err.Error()
				json.NewEncoder(w).Encode(response)
				return
			}
		}
		
		// Start the emitter
		if err := emitter.StartEmitter(); err != nil {
			response["message"] = "Failed to start streaming: " + err.Error()
			json.NewEncoder(w).Encode(response)
			return
		}
		
		// Success response
		response["success"] = true
		response["message"] = fmt.Sprintf("Started streaming %s candles from %s to %s at %v intervals",
			timeframe, startTime.Format("2006-01-02"), endTime.Format("2006-01-02"), interval)
		json.NewEncoder(w).Encode(response)
	})
	
	// Stop streaming endpoint
	mux.HandleFunc("/api/stream/stop", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method not allowed, use POST", http.StatusMethodNotAllowed)
			return
		}
		
		// Default response
		response := map[string]interface{}{
			"success": false,
			"message": "",
		}
		
		// Set content type for response
		w.Header().Set("Content-Type", "application/json")
		
		// Stop the emitter
		if err := emitter.Stop(); err != nil {
			response["message"] = "Failed to stop streaming: " + err.Error()
			json.NewEncoder(w).Encode(response)
			return
		}
		
		// Success response
		response["success"] = true
		response["message"] = "Streaming stopped successfully"
		json.NewEncoder(w).Encode(response)
	})
}
	
	// Start the HTTP server in a goroutine
	go func() {
		serverAddr := fmt.Sprintf(":%d", *port)
		log.Printf("Starting HTTP server on %s", serverAddr)
		if err := http.ListenAndServe(serverAddr, nil); err != nil {
			log.Println("HTTP server error:", err)
		}
	}()
	
	// Wait for interrupt signal
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
	<-sigChan
	
	// Stop all components
	log.Println("Stopping simulator...")
	
	// Cancel the context to signal all goroutines to stop
	cancel()
	
	// Explicitly stop the emitter
	emitter.Stop()
	
	log.Println("Simulator stopped")
}